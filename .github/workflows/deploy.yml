name: Fast Deploy of 2 Docker Instances to ARM64 Server

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Set Up Remote Docker Context
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          docker context create remote \
            --docker "host=ssh://${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}"

      - name: Use Remote Docker Context
        run: docker context use remote

      - name: Build Image and Deploy to Server
        run: |
          echo "[`date`] ðŸ“¦ Building image remotely"
          docker build -t my-app-image .

          echo "[`date`] ðŸ§¹ Removing old containers"
          docker rm -f instance1a instance2a || true

          echo "[`date`] ðŸ—‚ Creating .env on server"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            cd ~
            echo "NEXT_PUBLIC_MAPBOX_TOKEN=${NEXT_PUBLIC_MAPBOX_TOKEN}" > .env
            echo "REDIS_HOST=${REDIS_HOST}" >> .env
            echo "REDIS_PORT=${REDIS_PORT}" >> .env
            echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> .env
          ENDSSH

          echo "[`date`] ðŸš€ Running 2 containers"
          for i in 1a 2a; do
            docker run -d \
              --name instance$i \
              --env-file /home/${{ secrets.SERVER_USER }}/.env \
              --network coolify \
              my-app-image
          done
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}